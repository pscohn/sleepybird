pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
-- SleepyBird
-- by mysterpaul

-- todo:
-- synchronize bird speed with player resting offset
-- decide what algos to use, possibly levels based on score

high_score = 0
score = 0
screen_size = 128

platform_width = 8*3
platform_height = 8
initial_platform_x = 128
initial_platform_frame = 30
platform_static_y_pos = 64

frames_since_last_spawn = 0
platforms = {}

algos = {
	algo_simple = {
		spawn_type = "one_at_a_time",
		ypos_type = "static",
		speed_type = "constant",
		speed_min = 1,
		speed_max = 1,
	},
	algo_simple_yoffset = {
		spawn_type = "one_at_a_time",
		ypos_type = "random",
		speed_type = "constant",
		speed_min = 1,
		speed_max = 1,
	},
	algo_simple_faster = {
		spawn_type = "time",
		spawn_every_frames = 50,
		ypos_type = "static",
		speed_type = "constant",
		speed_min = 1,
		speed_max = 1,
	},
	algo_yoffset_faster = {
		spawn_type = "time",
		spawn_every_frames = 50,
		ypos_type = "random",
		speed_type = "random",
		speed_min = 0.25,
		speed_max = 2,
	},
	algo_extremes_slow = {
		spawn_type = "one_at_a_time",
		ypos_type = "extremes",
		speed_type = "constant",
		speed_min = 1,
		speed_max = 1,
	},
	algo_extremes_faster = {
		spawn_type = "time",
		spawn_every_frames = 50,
		ypos_type = "extremes",
		speed_type = "constant",
		speed_min = 1,
		speed_max = 1,
	},
}

function reset_state()
	if (score > high_score) high_score = score
	score = 0
	is_game_over = false
	player_x = 5
	player_y = 0
	stamina = 100

	-- when greater than 0, will count down by one each frame
	-- to interpolate flying action over multiple frames
	fly_frame = 0
	fly_released = false

	frames_since_last_spawn = 0
	current_algo = "algo_yoffset_faster"
	spawn_platform()
end

function generate_stars_quadrant(x,y,n,startIndex)
	for i=startIndex,startIndex+n do
		xNew = x+flr(rnd(screen_size/2))
		yNew = y+flr(rnd(screen_size/2))
		color = 6 + flr(rnd(2))
		frame = 20 + flr(rnd(20))
		stars[i] = {x = xNew, y = yNew, color = color, frame = frame}
	end
end

function generate_stars()
	stars = {}
	-- generate N stars each in 4 quadrants to ensure some coverage
	n = 8
	generate_stars_quadrant(0,0,n,1)
	generate_stars_quadrant(64,0,n,1+n)
	generate_stars_quadrant(0,64,n,1+(n*2))
	generate_stars_quadrant(64,64,n,1+(n*3))
end

function _init()
	generate_stars()

	reset_state()
end

function collides(ax1,ax2,ay1,ay2,bx1,bx2,by1,by2)
	if (ax2<bx1) return false
	if (bx2<ax1) return false
	if (ay2<by1) return false
	if (by2<ay1) return false
	return true
end

function add_stamina(amount)
	stamina += amount
	if (stamina < 0) stamina = 0
	if (stamina > 100) stamina = 100
end

function spawn_platform() 
	algo = algos[current_algo]

	platform_to_add = {
		x = initial_platform_x ,
		frame = initial_platform_frame,
		destroyed = false,
	}

	min_platform_y = 30
	max_platform_y = screen_size-8

	if algo.speed_type == "constant" then
		platform_to_add.speed = algo.speed_min
	elseif algo.speed_type == "random" then
		platform_to_add.speed = algo.speed_min+rnd(algo.speed_max-algo.speed_min)
	end
	
	if algo.ypos_type == "static" then
		platform_to_add.y = platform_static_y_pos
	elseif algo.ypos_type == "random" then
		platform_to_add.y = min_platform_y + flr(rnd(max_platform_y-min_platform_y))
	elseif algo.ypos_type == "extremes" then
		r = flr(rnd(2))
		if r == 0 then 
			platform_to_add.y = min_platform_y 
		else 
			platform_to_add.y = max_platform_y 
		end
	end

	-- find useable platform slot, or adds a new index at end
	platform_slot = 1
	for platform in all (platforms) do
		if platform.destroyed then
			break
		end
		platform_slot += 1
	end

	platforms[platform_slot] = platform_to_add
	frames_since_last_spawn = 0
end

function update_platforms()
	frames_since_last_spawn += 1
	algo = algos[current_algo]

	for platform in all (platforms) do
		platform.x = platform.x - platform.speed
		destroy = platform.x + platform_width < 0
		platform.destroyed = destroy

		if algo.spawn_type == "one_at_a_time" then
			if destroy then 
				spawn_platform()
			end
		elseif algo.spawn_type == "time" then
			if frames_since_last_spawn >= algo.spawn_every_frames then
				spawn_platform()
			end
		end
	end
end

function play_jump_sound()
	print "\ac#e"
end

function _update()
	is_flying = btn(5)

	if is_flying and not fly_released then
		is_flying = false
	elseif not is_flying then
		fly_released = true
	else
		fly_released = false
	end

	if is_game_over then
	  if (is_flying) reset_state()
		return
	end

	score += 1

	if (stamina == 0) is_flying = false

	if is_flying then
		play_jump_sound()
	end

	player_bottom_y = player_y+8

	if player_bottom_y > screen_size then
		is_game_over = true
		return
	end

	y_amount_to_add = 0

	y_amount_per_frame_when_flying = -2
	if is_flying then
		fly_frame = 6
		y_amount_to_add = y_amount_per_frame_when_flying
		add_stamina(-10)
	elseif fly_frame > 0 then
		y_amount_to_add = y_amount_per_frame_when_flying
		fly_frame -= 1
	else
		y_amount_to_add = 2
	end

	player_x2 = player_x+8
	resting_x_offset = 0

	is_resting = false

	for platform in all (platforms) do
		if collides(player_x,player_x2,player_y,player_bottom_y,platform.x,platform.x+platform_width,platform.y,platform.y+platform_height) then
			-- note: doesn't handle adding 2 when falling, may rest a pixel below the top of the platform
			if is_flying and player_y>platform.y then
				y_amount_to_add = 0
			elseif not is_flying and player_bottom_y<=platform.y+1 then
				y_amount_to_add = 0
				is_resting=true
				resting_x_offset = -platform.speed
				add_stamina(1)
			end
			break
		end
	end
	
	player_y += y_amount_to_add

	is_left = btn(0)
	is_right = btn(1)
	if (is_left) player_x -= 1
	if (is_right) player_x += 1
	player_x += resting_x_offset

	update_platforms()
end

function draw_stars() 
	for star in all (stars) do 
		pset(star.x, star.y, star.color)
		star.frame -= 1
		if star.frame < 0 then
			star.color = 6 + flr(rnd(2))
			star.frame = 20 + flr(rnd(20)) -- todo: duplicaated
		end
	end
end

function _draw()
	cls(1)
	draw_stars()
	print("score: "..score,11)

	if is_game_over then
		-- todo: why is 50 more centered than 60?
		print("game over", 50, 64)	
	else
		for platform in all (platforms) do
			if (not platform.destroyed) then
				platform_start_sprite = 3
				platform.frame -= 1
				-- 3 sprites per platform
				if (platform.frame < initial_platform_frame/2) platform_start_sprite += 3
				if (platform.frame == 0) platform.frame = initial_platform_frame
				spr(platform_start_sprite, platform.x, platform.y, 3, 1)
			end
		end

		stamina_bar_x = player_x - 4
		stamina_bar_y = player_y - 2
		stamina_fill_amount = stamina / 10

		sprite_id = 1
		if (fly_frame > 0) sprite_id = 2
		spr(sprite_id, player_x, player_y)

		if is_resting then
			print("zzz...", player_x+8, player_y-4, 7)
		end

		rect(stamina_bar_x, stamina_bar_y, stamina_bar_x+2, stamina_bar_y+12, 3)
		if stamina_fill_amount > 0 then
			rect(stamina_bar_x+1, stamina_bar_y+11, stamina_bar_x+1, stamina_bar_y+11-stamina_fill_amount, 11)
		end

	end
end



__gfx__
00000000000660000006600000005555555550000000000000005555555550000000000000055500000000000000000000000000000000000000000000000000
00000000000666000006660000056666666665000000000000056666666665000000000000050500000000000000000000000000000000000000000000000000
00700700006666900055669000666666666666655550000000666666665566655550000000050500000000000000000000000000000000000000000000000000
00077000006656990066569909666666666666666665000009666666656656666665000000050500000000000000000000000000000000000000000000000000
00077000065566000666660099555566566665666665000099555566566665666665000000053500000000000000000000000000000000000000000000000000
00700700056665000566650000000000656665655550000000000000000000655550000000053500000000000000000000000000000000000000000000000000
00000000000050000000500000000000056665000000000000000000000000000000000000053500000000000000000000000000000000000000000000000000
00000000000055000000550000000000005666500000000000000000000000000000000000055500000000000000000000000000000000000000000000000000
00000000000000000000000000000000000555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000b00000f0500f050120501505012050180501b050150501e050120502105021050240501b050270502705018050270502a0502a0502a0502a0502a0502d0502d0502d0502d0502d05030050300503305033050
__music__
00 01424344

